"use strict";(self.webpackChunkdeveloperdocs=self.webpackChunkdeveloperdocs||[]).push([[343],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return k}});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var d=a.createContext({}),l=function(e){var n=a.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=l(e.components);return a.createElement(d.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},p=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,s=e.originalType,d=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=l(t),k=r,m=p["".concat(d,".").concat(k)]||p[k]||c[k]||s;return t?a.createElement(m,o(o({ref:n},u),{},{components:t})):a.createElement(m,o({ref:n},u))}));function k(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var s=t.length,o=new Array(s);o[0]=p;var i={};for(var d in n)hasOwnProperty.call(n,d)&&(i[d]=n[d]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var l=2;l<s;l++)o[l]=t[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},2077:function(e,n,t){t.r(n),t.d(n,{assets:function(){return u},contentTitle:function(){return d},default:function(){return k},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return c}});var a=t(7462),r=t(3366),s=(t(7294),t(3905)),o=["components"],i={title:"StableHermesStaking",description:"How does the StableHermesStaking contract work? Why is it written that way?",author:"Hermes Team",sidebar:!0,tags:["solidity","hermes","stacking"],skill:"intermediate",published:new Date("2022-05-14T00:00:00.000Z"),lang:"en",sidebar_position:8},d="StableHermesStaking",l={unversionedId:"Staking/StableHermesStaking",id:"Staking/StableHermesStaking",title:"StableHermesStaking",description:"How does the StableHermesStaking contract work? Why is it written that way?",source:"@site/docs/Staking/StableHermesStaking.md",sourceDirName:"Staking",slug:"/Staking/StableHermesStaking",permalink:"/Developer-docs/docs/Staking/StableHermesStaking",draft:!1,tags:[{label:"solidity",permalink:"/Developer-docs/docs/tags/solidity"},{label:"hermes",permalink:"/Developer-docs/docs/tags/hermes"},{label:"stacking",permalink:"/Developer-docs/docs/tags/stacking"}],version:"current",sidebarPosition:8,frontMatter:{title:"StableHermesStaking",description:"How does the StableHermesStaking contract work? Why is it written that way?",author:"Hermes Team",sidebar:!0,tags:["solidity","hermes","stacking"],skill:"intermediate",published:"2022-05-14T00:00:00.000Z",lang:"en",sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"SingleStakingPool",permalink:"/Developer-docs/docs/Staking/SingleStakingPool"},next:{title:"Hermes Bar",permalink:"/Developer-docs/docs/Staking/Hermes Bar"}},u={},c=[{value:"StableHermesStaking.sol",id:"stablehermesstakingsol",level:3},{value:"Events",id:"events",level:3},{value:"Setup Functions",id:"setup-functions",level:4},{value:"Externally Accessible Functions",id:"externally-accessible-functions",level:4},{value:"deposit",id:"deposit",level:5},{value:"getUserInfo",id:"getuserinfo",level:5},{value:"rewardTokensLength",id:"rewardtokenslength",level:5},{value:"addRewardToken",id:"addrewardtoken",level:5},{value:"removeRewardToken",id:"removerewardtoken",level:5},{value:"setDepositFeePercent",id:"setdepositfeepercent",level:5},{value:"pendingReward",id:"pendingreward",level:5},{value:"withdraw",id:"withdraw",level:5},{value:"emergencyWithdraw",id:"emergencywithdraw",level:5},{value:"updateReward",id:"updatereward",level:5},{value:"Internal functions",id:"internal-functions",level:5},{value:"safeTokenTransfer",id:"safetokentransfer",level:5}],p={toc:c};function k(e){var n=e.components,t=(0,r.Z)(e,o);return(0,s.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"stablehermesstaking"},"StableHermesStaking"),(0,s.kt)("p",null,"  StableHermesStaking is a contract that allows HERMES deposits and receives stablecoins sent by MoneyMaker's daily\nharvests. Users deposit HERMES and receive a share of what has been sent by MoneyMaker based on their participation of\nthe total deposited HERMES. It is similar to a MasterChef, but we allow for claiming of different reward tokens\n(in case at some point we wish to change the stablecoin rewarded).\nEvery time ",(0,s.kt)("inlineCode",{parentName:"p"},"updateReward(token)")," is called, We distribute the balance of that tokens as rewards to users that are\ncurrently staking inside this contract, and they can claim it using ",(0,s.kt)("inlineCode",{parentName:"p"},"withdraw(0)")),(0,s.kt)("h3",{id:"stablehermesstakingsol"},"StableHermesStaking.sol"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://github.com/Hermes-defi/hermes-swap/blob/main/contracts/StableHermesStaking.sol"},"This contract")," "),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-solidity"},"contract StableHermesStaking is Ownable\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-solidity"},"  using SafeMath for uint256;\n  using SafeERC20 for IERC20;\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-solidity"}," struct UserInfo {\n        uint256 amount;\n        mapping(IERC20 => uint256) rewardDebt;       \n    }\n")),(0,s.kt)("p",null," We do some fancy math here. Basically, any point in time, the amount of HERMESs\nentitled to a user but is pending to be distributed is:"),(0,s.kt)("p",null,"   pending reward = (user.amount * accRewardPerShare) - user.rewardDebt","[token]"),(0,s.kt)("p",null," Whenever a user deposits or withdraws HERMES. Here's what happens:"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"accRewardPerShare (and ",(0,s.kt)("inlineCode",{parentName:"li"},"lastRewardBalance"),") gets updated"),(0,s.kt)("li",{parentName:"ol"},"User receives the pending reward sent to his/her address"),(0,s.kt)("li",{parentName:"ol"},"User's ",(0,s.kt)("inlineCode",{parentName:"li"},"amount")," gets updated"),(0,s.kt)("li",{parentName:"ol"},"User's ",(0,s.kt)("inlineCode",{parentName:"li"},"rewardDebt[token]")," gets updated")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-solidity"},"  IERC20 public hermes;\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-solidity"},"  uint256 internalHermesBalance;\n")),(0,s.kt)("p",null,"  Internal balance of HERMES, this gets updated on user deposits / withdrawals\nthis allows to reward users with HERMES."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-solidity"},"  IERC20[] public rewardTokens;\n")),(0,s.kt)("p",null,"  Array of tokens that users can claim"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-solidity"},"  mapping(IERC20 => bool) public isRewardToken;\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-solidity"},"  mapping(IERC20 => uint256) public lastRewardBalance;\n")),(0,s.kt)("p",null,"  Last reward balance of ",(0,s.kt)("inlineCode",{parentName:"p"},"token")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-solidity"},"  address public feeCollector;\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-solidity"},"  uint256 public depositFeePercent;\n")),(0,s.kt)("p",null,"  The deposit fee, scaled to ",(0,s.kt)("inlineCode",{parentName:"p"},"PRECISION")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-solidity"},"  mapping(IERC20 => uint256) public accRewardPerShare;\n")),(0,s.kt)("p",null,"  Accumulated ",(0,s.kt)("inlineCode",{parentName:"p"},"token")," rewards per share, scaled to ",(0,s.kt)("inlineCode",{parentName:"p"},"PRECISION"),". See above"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-solidity"},"  uint256 public PRECISION;\n")),(0,s.kt)("p",null,"  PRECISION of accRewardPerShare"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-solidity"},"  mapping(address => UserInfo) private userInfo;\n")),(0,s.kt)("p",null,"Info of each user that stakes HERMES"),(0,s.kt)("h3",{id:"events"},"Events"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-solidity"},"  event Deposit(address indexed user, uint256 amount, uint256 fee);\n")),(0,s.kt)("p",null,"Emitted when a user deposits HERMES"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-solidity"},"  event DepositFeeChanged(uint256 newFee, uint256 oldFee);\n")),(0,s.kt)("p",null,"Emitted when owner changes the deposit fee percentage"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-solidity"},"  event Withdraw(address indexed user, uint256 amount);\n")),(0,s.kt)("p",null,"Emitted when a user withdraws HERMES"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-solidity"},"  event ClaimReward(address indexed user, address indexed rewardToken, uint256 amount);\n")),(0,s.kt)("p",null,"Emitted when a user claims reward"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-solidity"},"  event EmergencyWithdraw(address indexed user, uint256 amount);\n")),(0,s.kt)("p",null,"Emitted when a user emergency withdraws its HERMES"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-solidity"},"  event RewardTokenAdded(address token);\n")),(0,s.kt)("p",null,"Emitted when owner adds a token to the reward tokens list"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-solidity"},"  event RewardTokenRemoved(address token);\n")),(0,s.kt)("p",null,"Emitted when owner removes a token from the reward tokens list"),(0,s.kt)("h4",{id:"setup-functions"},"Setup Functions"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-solidity"},'    constructor(\n        IERC20 _rewardToken,\n        IERC20 _hermes,\n        address _feeCollector,\n        uint256 _depositFeePercent\n    ) {\n        require(_feeCollector != address(0), "StableHermesStaking: fee collector can\'t be address 0");\n        require(_depositFeePercent <= 5e17, "StableHermesStaking: max deposit fee can\'t be greater than 50%");\n\n        hermes = _hermes;\n        depositFeePercent = _depositFeePercent;\n        feeCollector = _feeCollector;\n\n        isRewardToken[_rewardToken] = true;\n        rewardTokens.push(_rewardToken);\n        PRECISION = 1e24;\n    }\n')),(0,s.kt)("p",null,"  Initialize a new StableHermesStaking contract\nThis contract needs to receive an ERC20 ",(0,s.kt)("inlineCode",{parentName:"p"},"_rewardToken")," in order to distribute them (with MoneyMaker in our case)\n@param _rewardToken The address of the ERC20 reward token\n@param _hermes The address of the HERMES token\n@param _depositFeePercent The deposit fee percent, scalled to 1e18, e.g. 3% is 3e16     "),(0,s.kt)("h4",{id:"externally-accessible-functions"},"Externally Accessible Functions"),(0,s.kt)("h5",{id:"deposit"},"deposit"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-solidity"},"   function deposit(uint256 _amount) external {\n        UserInfo storage user = userInfo[msg.sender];\n\n        uint256 _fee = (_amount * depositFeePercent) / 1e18;\n        uint256 _amountMinusFee = _amount.sub(_fee);\n\n        uint256 _previousAmount = user.amount;\n        uint256 _newAmount = user.amount.add(_amountMinusFee);\n        user.amount = _newAmount;\n\n        uint256 _len = rewardTokens.length;\n        for (uint256 i; i < _len; i++) {\n            IERC20 _token = rewardTokens[i];\n            updateReward(_token);\n\n            if (_previousAmount != 0) {\n                uint256 _pending = _previousAmount.mul(accRewardPerShare[_token]).div(PRECISION).sub(\n                    user.rewardDebt[_token]\n                );\n                if (_pending != 0) {\n                    safeTokenTransfer(_token, msg.sender, _pending);\n                    emit ClaimReward(msg.sender, address(_token), _pending);\n                }\n            }\n            user.rewardDebt[_token] = _newAmount.mul(accRewardPerShare[_token]).div(PRECISION);\n        }\n\n        internalHermesBalance = internalHermesBalance.add(_amountMinusFee);\n        hermes.safeTransferFrom(msg.sender, feeCollector, _fee);\n        hermes.safeTransferFrom(msg.sender, address(this), _amountMinusFee);\n        emit Deposit(msg.sender, _amountMinusFee, _fee);\n    }\n")),(0,s.kt)("p",null,"  Deposit HERMES for reward token allocation\n@param _amount The amount of HERMES to deposit"),(0,s.kt)("h5",{id:"getuserinfo"},"getUserInfo"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-solidity"},"   function getUserInfo(address _user, IERC20 _rewardToken) external view returns (uint256, uint256) {\n        UserInfo storage user = userInfo[_user];\n        return (user.amount, user.rewardDebt[_rewardToken]);\n    }\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"Get user info\n@param _user The address of the user\n@param _rewardToken The address of the reward token\n@return The amount of HERMES user has deposited\n@return The reward debt for the chosen token\n \n")),(0,s.kt)("h5",{id:"rewardtokenslength"},"rewardTokensLength"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-solidity"},"   function rewardTokensLength() external view returns (uint256) {\n        return rewardTokens.length;\n    }\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"Get the number of reward tokens\n@return The length of the array\n")),(0,s.kt)("h5",{id:"addrewardtoken"},"addRewardToken"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-solidity"},'   function addRewardToken(IERC20 _rewardToken) external onlyOwner {\n        require(\n            !isRewardToken[_rewardToken] && address(_rewardToken) != address(0),\n            "StableHermesStaking: token can\'t be added"\n        );\n        require(rewardTokens.length < 25, "StableHermesStaking: list of token too big");\n        rewardTokens.push(_rewardToken);\n        isRewardToken[_rewardToken] = true;\n        updateReward(_rewardToken);\n        emit RewardTokenAdded(address(_rewardToken));\n    }\n')),(0,s.kt)("p",null,"  Add a reward token\n@param _rewardToken The address of the reward token"),(0,s.kt)("h5",{id:"removerewardtoken"},"removeRewardToken"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-solidity"},'   function removeRewardToken(IERC20 _rewardToken) external onlyOwner {\n        require(isRewardToken[_rewardToken], "StableHermesStaking: token can\'t be removed");\n        updateReward(_rewardToken);\n        isRewardToken[_rewardToken] = false;\n        uint256 _len = rewardTokens.length;\n        for (uint256 i; i < _len; i++) {\n            if (rewardTokens[i] == _rewardToken) {\n                rewardTokens[i] = rewardTokens[_len - 1];\n                rewardTokens.pop();\n                break;\n            }\n        }\n        emit RewardTokenRemoved(address(_rewardToken));\n    }\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"Remove a reward token\n@param _rewardToken The address of the reward token\n")),(0,s.kt)("h5",{id:"setdepositfeepercent"},"setDepositFeePercent"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-solidity"},'   function setDepositFeePercent(uint256 _depositFeePercent) external onlyOwner {\n        require(_depositFeePercent <= 5e17, "StableHermesStaking: deposit fee can\'t be greater than 50%");\n        uint256 oldFee = depositFeePercent;\n        depositFeePercent = _depositFeePercent;\n        emit DepositFeeChanged(_depositFeePercent, oldFee);\n    }\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"Set the deposit fee percent\n@param _depositFeePercent The new deposit fee percent\n")),(0,s.kt)("h5",{id:"pendingreward"},"pendingReward"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-solidity"},'  \n    function pendingReward(address _user, IERC20 _token) external view returns (uint256) {\n        require(isRewardToken[_token], "StableHermesStaking: wrong reward token");\n        UserInfo storage user = userInfo[_user];\n        uint256 _totalHermes = internalHermesBalance;\n        uint256 _accRewardTokenPerShare = accRewardPerShare[_token];\n\n        uint256 _currRewardBalance = _token.balanceOf(address(this));\n        uint256 _rewardBalance = _token == hermes ? _currRewardBalance.sub(internalHermesBalance) : _currRewardBalance;\n\n        if (_rewardBalance != lastRewardBalance[_token] && _totalHermes != 0) {\n            uint256 _accruedReward = _rewardBalance.sub(lastRewardBalance[_token]);\n            _accRewardTokenPerShare = _accRewardTokenPerShare.add(_accruedReward.mul(PRECISION).div(_totalHermes));\n        }\n        return user.amount.mul(_accRewardTokenPerShare).div(PRECISION).sub(user.rewardDebt[_token]);\n    }\n')),(0,s.kt)("p",null,"  View function to see pending reward token on frontend\n@param _user The address of the user\n@param _token The address of the token\n@return ",(0,s.kt)("inlineCode",{parentName:"p"},"_user"),"'s pending reward token"),(0,s.kt)("h5",{id:"withdraw"},"withdraw"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-solidity"},'   function withdraw(uint256 _amount) external {\n        UserInfo storage user = userInfo[msg.sender];\n        uint256 _previousAmount = user.amount;\n        require(_amount <= _previousAmount, "StableHermesStaking: withdraw amount exceeds balance");\n        uint256 _newAmount = user.amount.sub(_amount);\n        user.amount = _newAmount;\n\n        uint256 _len = rewardTokens.length;\n        if (_previousAmount != 0) {\n            for (uint256 i; i < _len; i++) {\n                IERC20 _token = rewardTokens[i];\n                updateReward(_token);\n\n                uint256 _pending = _previousAmount.mul(accRewardPerShare[_token]).div(PRECISION).sub(\n                    user.rewardDebt[_token]\n                );\n                user.rewardDebt[_token] = _newAmount.mul(accRewardPerShare[_token]).div(PRECISION);\n\n                if (_pending != 0) {\n                    safeTokenTransfer(_token, msg.sender, _pending);\n                    emit ClaimReward(msg.sender, address(_token), _pending);\n                }\n            }\n        }\n\n        internalHermesBalance = internalHermesBalance.sub(_amount);\n        hermes.safeTransfer(msg.sender, _amount);\n\n        emit Withdraw(msg.sender, _amount);\n    }\n')),(0,s.kt)("p",null,"  Withdraw HERMES and harvest the rewards\n@param _amount The amount of HERMES to withdraw"),(0,s.kt)("h5",{id:"emergencywithdraw"},"emergencyWithdraw"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-solidity"},"  function emergencyWithdraw() external {\n        UserInfo storage user = userInfo[msg.sender];\n\n        uint256 _amount = user.amount;\n        user.amount = 0;\n        uint256 _len = rewardTokens.length;\n        for (uint256 i; i < _len; i++) {\n            IERC20 _token = rewardTokens[i];\n            user.rewardDebt[_token] = 0;\n        }\n        hermes.safeTransfer(msg.sender, _amount);\n        emit EmergencyWithdraw(msg.sender, _amount);\n    }\n")),(0,s.kt)("p",null,"  Withdraw without caring about rewards. EMERGENCY ONLY"),(0,s.kt)("h5",{id:"updatereward"},"updateReward"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-solidity"},'  function updateReward(IERC20 _token) public {\n        require(isRewardToken[_token], "StableHermesStaking: wrong reward token");\n\n        uint256 _currRewardBalance = _token.balanceOf(address(this));\n        uint256 _rewardBalance = _token == hermes ? _currRewardBalance.sub(internalHermesBalance) : _currRewardBalance;\n\n        uint256 _totalHermes = internalHermesBalance;\n\n        // Did StableHermesStaking receive any token\n        if (_rewardBalance == lastRewardBalance[_token] || _totalHermes == 0) {\n            return;\n        }\n\n        uint256 _accruedReward = _rewardBalance.sub(lastRewardBalance[_token]);\n\n        accRewardPerShare[_token] = accRewardPerShare[_token].add(_accruedReward.mul(PRECISION).div(_totalHermes));\n        lastRewardBalance[_token] = _rewardBalance;\n    }\n\n')),(0,s.kt)("p",null,"  Update reward variables\n@param _token The address of the reward token\n@dev Needs to be called before any deposit or withdrawal"),(0,s.kt)("h5",{id:"internal-functions"},"Internal functions"),(0,s.kt)("h5",{id:"safetokentransfer"},"safeTokenTransfer"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-solidity"},"  function safeTokenTransfer(\n        IERC20 _token,\n        address _to,\n        uint256 _amount\n    ) internal {\n        uint256 _currRewardBalance = _token.balanceOf(address(this));\n        uint256 _rewardBalance = _token == hermes ? _currRewardBalance.sub(internalHermesBalance) : _currRewardBalance;\n\n        if (_amount > _rewardBalance) {\n            lastRewardBalance[_token] = lastRewardBalance[_token].sub(_rewardBalance);\n            _token.safeTransfer(_to, _rewardBalance);\n        } else {\n            lastRewardBalance[_token] = lastRewardBalance[_token].sub(_amount);\n            _token.safeTransfer(_to, _amount);\n        }\n    }\n")),(0,s.kt)("p",null,"  Safe token transfer function, just in case if rounding error\ncauses pool to not have enough reward tokens\n@param _token The address of then token to transfer\n@param _to The address that will receive ",(0,s.kt)("inlineCode",{parentName:"p"},"_amount")," ",(0,s.kt)("inlineCode",{parentName:"p"},"rewardToken"),"\n@param _amount The amount to send to ",(0,s.kt)("inlineCode",{parentName:"p"},"_to")))}k.isMDXComponent=!0}}]);